*** /Users/Jeroen/src/aspect_20180725_900_modify/source/material_model/water.cc	2018-08-21 11:17:58.000000000 -0600
--- water.cc	2019-05-24 14:24:17.000000000 -0600
***************
*** 1,5 ****
  /*
!   Copyright (C) 2015 - 2018 by the authors of the ASPECT code.
  
    This file is part of ASPECT.
  
--- 1,5 ----
  /*
!   Copyright (C) 2015 - 2019 by the authors of the ASPECT code.
  
    This file is part of ASPECT.
  
***************
*** 99,105 ****
                                                    std::max(0.0, in.pressure[q]),
                                                    depletion);
          }
-       return;
      }
  
  
--- 99,104 ----
***************
*** 121,129 ****
            Functions::FEFieldFunction<dim, DoFHandler<dim>, LinearAlgebra::BlockVector>
            fe_value(this->get_dof_handler(), this->get_old_solution(), this->get_mapping());
  
-           AssertThrow(this->introspection().compositional_name_exists("porosity"),
-                       ExcMessage("Material model Melt simple with melt transport only "
-                                  "works if there is a compositional field called porosity."));
            const unsigned int porosity_idx = this->introspection().compositional_index_for_name("porosity");
  
            fe_value.set_active_cell(in.current_cell);
--- 120,125 ----
***************
*** 158,229 ****
            out.densities[i] = (reference_rho_s + delta_rho) * temperature_dependence
                               * std::exp(compressibility * (in.pressure[i] - this->get_surface_pressure()));
  
!           if (this->include_melt_transport() && include_melting_and_freezing && in.strain_rate.size())
              {
-               AssertThrow(this->introspection().compositional_name_exists("peridotite"),
-                           ExcMessage("Material model Melt simple only works if there is a "
-                                      "compositional field called peridotite."));
-               AssertThrow(this->introspection().compositional_name_exists("porosity"),
-                           ExcMessage("Material model Melt simple with melt transport only "
-                                      "works if there is a compositional field called porosity."));
                const unsigned int porosity_idx = this->introspection().compositional_index_for_name("porosity");
!               const unsigned int peridotite_idx = this->introspection().compositional_index_for_name("peridotite");
  
!               // Calculate the melting rate as difference between the equilibrium melt fraction
!               // and the solution of the previous time step (or the current solution, in case
!               // operator splitting is used).
!               // The solidus is lowered by previous melting events (fractional melting).
!               const double eq_melt_fraction = melt_fraction(in.temperature[i],
!                                                             this->get_adiabatic_conditions().pressure(in.position[i]),
!                                                             in.composition[i][peridotite_idx] - in.composition[i][porosity_idx]);
!               double porosity_change = eq_melt_fraction - old_porosity[i];
! 
!               // do not allow negative porosity
!               if (old_porosity[i] + porosity_change < 0)
!                 porosity_change = -old_porosity[i];
  
!               for (unsigned int c=0; c<in.composition[i].size(); ++c)
                  {
!                   if (c == peridotite_idx && this->get_timestep_number() > 1)
!                     out.reaction_terms[i][c] = porosity_change
!                                                - in.composition[i][peridotite_idx] * trace(in.strain_rate[i]) * this->get_timestep();
!                   else if (c == porosity_idx && this->get_timestep_number() > 1)
!                     out.reaction_terms[i][c] = porosity_change
!                                                * out.densities[i] / this->get_timestep();
!                   else
!                     out.reaction_terms[i][c] = 0.0;
  
!                   // fill reaction rate outputs if the model uses operator splitting
!                   if (this->get_parameters().use_operator_splitting)
                      {
!                       if (reaction_rate_out != NULL)
                          {
!                           if (c == peridotite_idx && this->get_timestep_number() > 0)
!                             reaction_rate_out->reaction_rates[i][c] = porosity_change / melting_time_scale
!                                                                       - in.composition[i][peridotite_idx] * trace(in.strain_rate[i]);
!                           else if (c == porosity_idx && this->get_timestep_number() > 0)
!                             reaction_rate_out->reaction_rates[i][c] = porosity_change / melting_time_scale;
!                           else
!                             reaction_rate_out->reaction_rates[i][c] = 0.0;
                          }
-                       out.reaction_terms[i][c] = 0.0;
                      }
-                 }
  
!               const double porosity = std::min(1.0, std::max(in.composition[i][porosity_idx],0.0));
!               out.viscosities[i] = eta_0 * exp(- alpha_phi * porosity);
!             }
!           else
!             {
!               out.viscosities[i] = eta_0;
  
!               // no melting/freezing is used in the model --> set all reactions to zero
!               for (unsigned int c=0; c<in.composition[i].size(); ++c)
!                 {
!                   out.reaction_terms[i][c] = 0.0;
  
!                   if (this->get_parameters().use_operator_splitting && reaction_rate_out != NULL)
!                     reaction_rate_out->reaction_rates[i][c] = 0.0;
                  }
              }
  
--- 154,229 ----
            out.densities[i] = (reference_rho_s + delta_rho) * temperature_dependence
                               * std::exp(compressibility * (in.pressure[i] - this->get_surface_pressure()));
  
!           out.viscosities[i] = eta_0;
!           // By default, no melting or freezing --> set all reactions to zero
!           for (unsigned int c=0; c<in.composition[i].size(); ++c)
!             {
!               out.reaction_terms[i][c] = 0.0;
! 
!               if (this->get_parameters().use_operator_splitting && reaction_rate_out != nullptr)
!                 reaction_rate_out->reaction_rates[i][c] = 0.0;
!             }
! 
!           if (this->include_melt_transport())
              {
                const unsigned int porosity_idx = this->introspection().compositional_index_for_name("porosity");
!               const double porosity = std::min(1.0, std::max(in.composition[i][porosity_idx],0.0));
  
!               // calculate viscosity based on local melt
!               out.viscosities[i] *= exp(- alpha_phi * porosity);
  
!               if (include_melting_and_freezing && in.strain_rate.size())
                  {
!                   const unsigned int peridotite_idx = this->introspection().compositional_index_for_name("peridotite");
! 
!                   // Calculate the melting rate as difference between the equilibrium melt fraction
!                   // and the solution of the previous time step (or the current solution, in case
!                   // operator splitting is used).
!                   // The solidus is lowered by previous melting events (fractional melting).
!                   const double eq_melt_fraction = melt_fraction(in.temperature[i],
!                                                                 this->get_adiabatic_conditions().pressure(in.position[i]),
!                                                                 in.composition[i][peridotite_idx] - in.composition[i][porosity_idx]);
!                   double porosity_change = eq_melt_fraction - old_porosity[i];
!                   // do not allow negative porosity
!                   if (old_porosity[i] + porosity_change < 0)
!                     porosity_change = -old_porosity[i];
  
!                   for (unsigned int c=0; c<in.composition[i].size(); ++c)
                      {
!                       if (c == peridotite_idx && this->get_timestep_number() > 1)
!                         out.reaction_terms[i][c] = porosity_change
!                                                    - in.composition[i][peridotite_idx] * trace(in.strain_rate[i]) * this->get_timestep();
!                       else if (c == porosity_idx && this->get_timestep_number() > 1)
!                         out.reaction_terms[i][c] = porosity_change
!                                                    * out.densities[i] / this->get_timestep();
!                       else
!                         out.reaction_terms[i][c] = 0.0;
! 
!                       // fill reaction rate outputs if the model uses operator splitting
!                       if (this->get_parameters().use_operator_splitting)
                          {
!                           if (reaction_rate_out != nullptr)
!                             {
!                               if (c == peridotite_idx && this->get_timestep_number() > 0)
!                                 reaction_rate_out->reaction_rates[i][c] = porosity_change / melting_time_scale
!                                                                           - in.composition[i][peridotite_idx] * trace(in.strain_rate[i]);
!                               else if (c == porosity_idx && this->get_timestep_number() > 0)
!                                 reaction_rate_out->reaction_rates[i][c] = porosity_change / melting_time_scale;
!                               else
!                                 reaction_rate_out->reaction_rates[i][c] = 0.0;
!                             }
!                           out.reaction_terms[i][c] = 0.0;
                          }
                      }
  
!                   // find depletion = peridotite, which might affect shear viscosity:
!                   const double depletion_visc = std::min(1.0, std::max(in.composition[i][peridotite_idx],0.0));
  
!                   // calculate strengthening due to depletion:
!                   const double depletion_strengthening = std::min(exp(alpha_depletion*depletion_visc),delta_eta_depletion_max);
  
!                   // calculate viscosity change due to local melt and depletion:
!                   out.viscosities[i] *= depletion_strengthening;
                  }
              }
  
***************
*** 251,257 ****
        // fill melt outputs if they exist
        MeltOutputs<dim> *melt_out = out.template get_additional_output<MeltOutputs<dim> >();
  
!       if (melt_out != NULL)
          {
            const unsigned int porosity_idx = this->introspection().compositional_index_for_name("porosity");
  
--- 251,257 ----
        // fill melt outputs if they exist
        MeltOutputs<dim> *melt_out = out.template get_additional_output<MeltOutputs<dim> >();
  
!       if (melt_out != nullptr)
          {
            const unsigned int porosity_idx = this->introspection().compositional_index_for_name("porosity");
  
***************
*** 416,421 ****
--- 416,439 ----
                               "computed. If the model does not use operator splitting, this parameter is not used. "
                               "Units: yr or s, depending on the ``Use years "
                               "in output instead of seconds'' parameter.");
+           prm.declare_entry ("Exponential depletion strengthening factor", "0.0",
+                              Patterns::Double (0),
+                              "$\\alpha_F$: exponential dependency of viscosity on the depletion "
+                              "field $F$ (called peridotite). "
+                              "Dimensionless factor. With a value of 0.0 (the default) the "
+                              "viscosity does not depend on the depletion. The effective viscosity increase"
+                              "due to depletion is defined as $exp( \\alpha_F * F)$. "
+                              "Rationale: melting dehydrates the source rock by removing most of the volatiles,"
+                              "and makes it stronger. Hirth and Kohlstedt (1996) report typical values around a "
+                              "factor 100 to 1000 viscosity contrast between wet and dry rocks, although some "
+                              "experimental studies report a smaller (factor 10) contrast (e.g. Fei et al., 2013).");
+           prm.declare_entry ("Maximum Depletion viscosity change", "1.0e3",
+                              Patterns::Double (0),
+                              "$\\Delta \\eta_{F,max}$: maximum depletion strengthening of viscosity. "
+                              "Rationale: melting dehydrates the source rock by removing most of the volatiles,"
+                              "and makes it stronger. Hirth and Kohlstedt (1996) report typical values around a "
+                              "factor 100 to 1000 viscosity contrast between wet and dry rocks, although some "
+                              "experimental studies report a smaller (factor 10) contrast (e.g. Fei et al., 2013).");
          }
          prm.leave_subsection();
        }
***************
*** 453,461 ****
            melt_compressibility              = prm.get_double ("Melt compressibility");
            include_melting_and_freezing      = prm.get_bool ("Include melting and freezing");
            melting_time_scale                = prm.get_double ("Melting time scale for operator splitting");
  
            if (thermal_viscosity_exponent!=0.0 && reference_T == 0.0)
!             AssertThrow(false, ExcMessage("Error: Material model Melt simple with Thermal viscosity exponent can not have reference_T=0."));
  
            if (this->convert_output_to_years() == true)
              melting_time_scale *= year_in_seconds;
--- 471,481 ----
            melt_compressibility              = prm.get_double ("Melt compressibility");
            include_melting_and_freezing      = prm.get_bool ("Include melting and freezing");
            melting_time_scale                = prm.get_double ("Melting time scale for operator splitting");
+           alpha_depletion                   = prm.get_double ("Exponential depletion strengthening factor");
+           delta_eta_depletion_max           = prm.get_double ("Maximum Depletion viscosity change");
  
            if (thermal_viscosity_exponent!=0.0 && reference_T == 0.0)
!             AssertThrow(false, ExcMessage("Error: Material model Melt global with Thermal viscosity exponent can not have reference_T=0."));
  
            if (this->convert_output_to_years() == true)
              melting_time_scale *= year_in_seconds;
***************
*** 470,476 ****
--- 490,513 ----
                                       + Utilities::to_string(melting_time_scale) + "."));
                AssertThrow(melting_time_scale > 0,
                            ExcMessage("The Melting time scale for operator splitting must be larger than 0!"));
+               AssertThrow(this->introspection().compositional_name_exists("porosity"),
+                           ExcMessage("Material model Melt global with melt transport only "
+                                      "works if there is a compositional field called porosity."));
+             }
+ 
+           if (this->include_melt_transport())
+             {
+               AssertThrow(this->introspection().compositional_name_exists("porosity"),
+                           ExcMessage("Material model Melt global with melt transport only "
+                                      "works if there is a compositional field called porosity."));
+               if (include_melting_and_freezing)
+                 {
+                   AssertThrow(this->introspection().compositional_name_exists("peridotite"),
+                               ExcMessage("Material model Melt global only works if there is a "
+                                          "compositional field called peridotite."));
+                 }
              }
+ 
          }
          prm.leave_subsection();
        }
***************
*** 483,494 ****
      MeltGlobal<dim>::create_additional_named_outputs (MaterialModel::MaterialModelOutputs<dim> &out) const
      {
        if (this->get_parameters().use_operator_splitting
!           && out.template get_additional_output<ReactionRateOutputs<dim> >() == NULL)
          {
            const unsigned int n_points = out.viscosities.size();
            out.additional_outputs.push_back(
!             std::shared_ptr<MaterialModel::AdditionalMaterialOutputs<dim> >
!             (new MaterialModel::ReactionRateOutputs<dim> (n_points, this->n_compositional_fields())));
          }
      }
    }
--- 520,530 ----
      MeltGlobal<dim>::create_additional_named_outputs (MaterialModel::MaterialModelOutputs<dim> &out) const
      {
        if (this->get_parameters().use_operator_splitting
!           && out.template get_additional_output<ReactionRateOutputs<dim> >() == nullptr)
          {
            const unsigned int n_points = out.viscosities.size();
            out.additional_outputs.push_back(
!             std_cxx14::make_unique<MaterialModel::ReactionRateOutputs<dim>> (n_points, this->n_compositional_fields()));
          }
      }
    }
